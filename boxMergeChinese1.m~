function wordOut = boxMergeChinese1(wordIn)

% check input
nWordIn = length(wordIn);
wordOut = wordIn;
if nWordIn < 1
    return;
end

TH_DISX = 1.2;
TH_DISY = 0.75;
TH_MAXAR = 1.5;

%% sort
[wordOutSort, wordBoxSort] = sortWords(wordIn);
%% precomputing
boxes = wordBoxSort(:, 1:4);
nbox = nWordIn;
xCenter = floor(boxes(:, 1) + boxes(:, 3) / 2); %xCenter
yCenter = floor(boxes(:, 2) + boxes(:, 4) / 2); %yCenter
wh = boxes(:, 3) ./ boxes(:, 4); % wh = w/h
hw = 1./wh; % hw = h/w
maxAR = max(wh, hw); % maxAR = max(wh, hw)
for i = 1:nbox
    char(i) = struct('left',[],'right',[]);
end
%% group left child and right child
for i = 1:nWordIn
    for j = i+1:nWordIn
        meanW = mean(boxes(i, 3), boxes(j, 3));
        miniH = min(boxes(i, 4), boxes(j, 4));
        disX = abs(abs(xCenter(i) - xCenter(j)) - meanW) / miniH;
        disY = abs(yCenter(i) - yCenter(j)) /miniH;
        if disX < TH_DISX && disY < TH_DISY && ...
                maxAR(i) < TH_MAXAR && maxAR(i) < TH_MAXAR
            if boxes(i, 1) <= boxes(j, 1)
                char(i).right = [char(i).right, j];
                char(j).left = [char(j).left, i];
            else
                char(i).left = [char(i).left, j];
                char(j).right = [char(j).right, i];
                
            end
        end
    end
end
%% generate word by merging chars
SG = cell(nbox, 1);
for i = 1:nbox
    n1 = size(char(i).left,2);
    n2 = size(char(i).right,2);
    if ( n1 ~= 0 || n2 ~= 0 )
        set1 = char(i).left ;
        set2 = char(i).right;
        unionChar = unique(  [set1, set2] );
        SG{i} = [unionChar,i];
    end
end
newSG = unionSet(SG, 1);
%% output word
wordOut = [];
% word of multi char
nWordOut = length( newSG );
for i =1: nWordOut
    idx = newSG{i};
    nChar = length( idx );
    charBoxes = reshape([wordOutSort(idx).charbox], [4, nChar]);
    wordOut(i).charbox = charBoxes;
    wordOut(i).wordbox = mmbox(boxes(idx, :)); 
end
% word of single char
if nWordOut > 0
    idxWordChar = [newSG{:}];
else
    idxWordChar = [];
end
idxAll = 1:nWordIn;
idxSingleChar = setdiff(idxAll, idxWordChar);
nSingle =  length(idxSingleChar);
k = nWordOut +1;
for i = 1:nSingle
    charBoxes = [wordOutSort(idxSingleChar(i)).charbox];
    wordOut(k).charbox = charBoxes;
    wordOut(k).wordbox = boxes(idxSingleChar(i), :);
    k = k +1;
end
displayWordBox(wordOut);
disp('ok');
end

